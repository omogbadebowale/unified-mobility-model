# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

# Given data: Temperature-dependent mobility for NbCoSn
temperature = np.array([300, 350, 400, 450, 500, 550, 600, 650, 700])  # Temperatures in K
mobility = np.array([438.18, 383.41, 346.89, 319.50, 292.12, 273.86, 237.35, 219.09, 200.83])  # Mobility in cm²/V·s

# Define the refined model for mobility, incorporating grain boundary and phonon scattering
def mobility_model(T, mu_w, phi_GB, l0, w_GB, p):
    k_B = 8.617333262145e-5  # Boltzmann constant in eV/K
    # Mean free path as a function of temperature
    l_T = l0 * T ** (-p)
    # The full model expression
    return mu_w * np.exp(-phi_GB / (k_B * T)) * (l_T / (l_T + w_GB))

# Initial guesses for the parameters (mu_w, phi_GB, l0, w_GB, p)
mu_w_guess = 150  # Weighted mobility (cm^2/V·s)
phi_GB_guess = 0.05  # Grain boundary barrier height (eV)
l0_guess = 20  # Mean free path at 300 K (nm)
w_GB_guess = 10  # Grain boundary width (nm)
p_guess = 1.5  # Temperature exponent for mean free path

# Fit the model to the experimental data
params, covariance = curve_fit(
    mobility_model,
    temperature,
    mobility,
    p0=[mu_w_guess, phi_GB_guess, l0_guess, w_GB_guess, p_guess],
    maxfev=10000
)

# Extract the fitted parameters
mu_w_fit, phi_GB_fit, l0_fit, w_GB_fit, p_fit = params

# Calculate the fitted mobility using the refined model
mobility_fitted = mobility_model(temperature, *params)

# Plot the experimental data and the fitted model with the refined parameters
plt.figure(figsize=(8, 6))
plt.plot(temperature, mobility, 'o', label='NbCoSn', color='blue')
plt.plot(temperature, mobility_fitted, '-', label='Fitted Model', color='red')
plt.xlabel('Temperature (K)')
plt.ylabel('Mobility (cm²/V·s)')
plt.legend()
plt.title('NbCoSn: Mobility vs Temperature (Refined Fitting)')
plt.grid(True)
plt.show()

# Display the refined fitted parameters
mu_w_fit, phi_GB_fit, l0_fit, w_GB_fit, p_fit
